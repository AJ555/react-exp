{"version":3,"sources":["serviceWorker.js","Counter/counter.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Counter","className","Component","Timer","props","timerMessage","timerTime","min","sec","updateTimer","bind","timerInterval","this","timer","newDate","Date","setHours","endTime","getTime","timeSpent","interval","setInterval","setState","temp","getMinutes","getSeconds","clearInterval","type","onClick","Welcome","name","App","to","path","exact","component","render","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f519803.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport \"./counter.scss\";\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Timer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Counter;\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timerMessage: \"Let the countdown begin!\",\r\n      timerTime: { min: 0, sec: 0 },\r\n    };\r\n    this.updateTimer = this.updateTimer.bind(this);\r\n  }\r\n  updateTimer() {\r\n    const timerInterval = (this.props.timer ? this.props.timer : 1) * 60 * 1000;\r\n    const newDate = new Date();\r\n    newDate.setHours(0, 0, 0, 0);\r\n    const endTime = new Date(newDate.getTime() + timerInterval);\r\n    const refreshTimeInMiliseconds = 1000;\r\n    let timeSpent = 0;\r\n    const interval = setInterval(() => {\r\n      this.setState({ timerMessage: \"Keep Going\" });\r\n      timeSpent += refreshTimeInMiliseconds;\r\n      let temp = new Date(newDate.getTime() + timeSpent);\r\n      console.log(temp.getMinutes(), temp.getSeconds());\r\n      this.setState({\r\n        timerTime: { min: temp.getMinutes(), sec: temp.getSeconds() },\r\n      });\r\n      if (temp.getTime() === endTime.getTime()) {\r\n        this.setState({ timerMessage: \"Great Work!\" });\r\n        clearInterval(interval);\r\n      }\r\n    }, refreshTimeInMiliseconds);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.state.timerMessage}</h1>\r\n        <button type=\"button\" onClick={this.updateTimer}>\r\n          Start Timer\r\n        </button>\r\n        <div>\r\n          <span>{this.state.timerTime.min}</span>:{this.state.timerTime.sec}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Counter from \"./Counter/counter\";\nimport { Switch } from \"react-router-dom\";\n// import TicTacToe from \"./TicTacToe/tictactoe\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-container-app\">\n        <p>This message is from a class component</p>\n        <h1>Hello World</h1>\n        <Welcome name=\"User\"></Welcome>\n        <p>Click on the links to navigate further:</p>\n        <ol>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/counter\">Counter</Link>\n          </li>\n        </ol>\n\n        <Switch>\n          <Route path=\"/counter\" exact component={Counter} />\n          <Route path=\"/\" exact>\n            <h1>Hello from the homepage!</h1>\n          </Route>\n          <Route path=\"/*\" render={() => <h1>404 Not Found.</h1>} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nfunction Welcome(props) {\n  return (\n    <div>\n      <p>This message is from a functional component</p>\n      <h1>Welcome, {props.name}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\n// import App from \"./App\";\n// import TicTacToe from \"./TicTacToe/tictactoe\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}