{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xluci\\\\Desktop\\\\React\\\\sample-app\\\\src\\\\Counter\\\\counter.js\";\nimport React, { Component } from \"react\";\nimport \"./counter.scss\";\n\nclass Counter extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Timer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Counter;\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerMessage: \"Let the countdown begin!\",\n      timerTime: {\n        min: 0,\n        sec: 0\n      }\n    };\n    this.updateTimer = this.updateTimer.bind(this);\n  }\n\n  updateTimer() {\n    const timerInterval = (this.props.timer ? this.props.timer : 1) * 60 * 1000;\n    const newDate = new Date();\n    newDate.setHours(0, 0, 0, 0);\n    const endTime = new Date(newDate.getTime() + timerInterval);\n    const refreshTimeInMiliseconds = 1000;\n    let timeSpent = 0; //   let timerTime = { min: 0, sec: 0 };\n    //   let timerMessage = \"\";\n\n    const interval = setInterval(() => {\n      //   timerMessage = \"Keep Going\";\n      this.setState({\n        timerMessage: \"Keep Going\"\n      });\n      timeSpent += refreshTimeInMiliseconds;\n      let temp = new Date(newDate.getTime() + timeSpent);\n      console.log(temp.getMinutes(), temp.getSeconds()); //   timerTime.min = temp.getMinutes();\n      //   timerTime.sec = temp.getSeconds();\n\n      this.setState({\n        timerTime: {\n          min: temp.getMinutes(),\n          sec: temp.getSeconds()\n        }\n      });\n\n      if (temp.getTime() === endTime.getTime()) {\n        // timerMessage = \"Great Work!\";\n        this.setState({\n          timerMessage: \"Great Work!\"\n        });\n        clearInterval(interval);\n      }\n    }, refreshTimeInMiliseconds);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, this.state.timerMessage), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.updateTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"Start Timer\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, this.state.timerTime.min), \":\", this.state.timerTime.sec));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/xluci/Desktop/React/sample-app/src/Counter/counter.js"],"names":["React","Component","Counter","render","Timer","constructor","props","state","timerMessage","timerTime","min","sec","updateTimer","bind","timerInterval","timer","newDate","Date","setHours","endTime","getTime","refreshTimeInMiliseconds","timeSpent","interval","setInterval","setState","temp","console","log","getMinutes","getSeconds","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./counter.scss\";\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Timer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Counter;\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timerMessage: \"Let the countdown begin!\",\r\n      timerTime: { min: 0, sec: 0 },\r\n    };\r\n    this.updateTimer = this.updateTimer.bind(this);\r\n  }\r\n  updateTimer() {\r\n    const timerInterval = (this.props.timer ? this.props.timer : 1) * 60 * 1000;\r\n    const newDate = new Date();\r\n    newDate.setHours(0, 0, 0, 0);\r\n    const endTime = new Date(newDate.getTime() + timerInterval);\r\n    const refreshTimeInMiliseconds = 1000;\r\n    let timeSpent = 0;\r\n    //   let timerTime = { min: 0, sec: 0 };\r\n    //   let timerMessage = \"\";\r\n    const interval = setInterval(() => {\r\n      //   timerMessage = \"Keep Going\";\r\n      this.setState({ timerMessage: \"Keep Going\" });\r\n      timeSpent += refreshTimeInMiliseconds;\r\n      let temp = new Date(newDate.getTime() + timeSpent);\r\n      console.log(temp.getMinutes(), temp.getSeconds());\r\n      //   timerTime.min = temp.getMinutes();\r\n      //   timerTime.sec = temp.getSeconds();\r\n      this.setState({\r\n        timerTime: { min: temp.getMinutes(), sec: temp.getSeconds() },\r\n      });\r\n      if (temp.getTime() === endTime.getTime()) {\r\n        // timerMessage = \"Great Work!\";\r\n        this.setState({ timerMessage: \"Great Work!\" });\r\n        clearInterval(interval);\r\n      }\r\n    }, refreshTimeInMiliseconds);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.state.timerMessage}</h1>\r\n        <button type=\"button\" onClick={this.updateTimer}>\r\n          Start Timer\r\n        </button>\r\n        <div>\r\n          <span>{this.state.timerTime.min}</span>:{this.state.timerTime.sec}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}