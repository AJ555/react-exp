{"version":3,"sources":["serviceWorker.js","Counter/counter.js","TicTacToe/components/Board.js","TicTacToe/tictactoe.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Counter","className","Component","Timer","props","timerMessage","timerTime","min","sec","updateTimer","bind","timerInterval","this","timer","newDate","Date","setHours","endTime","getTime","timeSpent","interval","setInterval","setState","temp","getMinutes","getSeconds","clearInterval","type","onClick","Square","value","Board","i","squares","renderSquare","PureComponent","calculateWinner","lines","length","a","b","c","TicTacToe","history","Array","fill","xIsNext","stepNumber","step","slice","concat","status","current","winner","moves","map","move","desc","key","to","jumpTo","handleClick","createBrowserHistory","basename","process","Welcome","name","App","path","exact","component","render","ReactDOM","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a88fbfbe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./counter.scss\";\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Timer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Counter;\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timerMessage: \"Let the countdown begin!\",\r\n      timerTime: { min: 0, sec: 0 },\r\n    };\r\n    this.updateTimer = this.updateTimer.bind(this);\r\n  }\r\n  updateTimer() {\r\n    const timerInterval = (this.props.timer ? this.props.timer : 1) * 60 * 1000;\r\n    const newDate = new Date();\r\n    newDate.setHours(0, 0, 0, 0);\r\n    const endTime = new Date(newDate.getTime() + timerInterval);\r\n    const refreshTimeInMiliseconds = 1000;\r\n    let timeSpent = 0;\r\n    const interval = setInterval(() => {\r\n      this.setState({ timerMessage: \"Keep Going\" });\r\n      timeSpent += refreshTimeInMiliseconds;\r\n      let temp = new Date(newDate.getTime() + timeSpent);\r\n      console.log(temp.getMinutes(), temp.getSeconds());\r\n      this.setState({\r\n        timerTime: { min: temp.getMinutes(), sec: temp.getSeconds() },\r\n      });\r\n      if (temp.getTime() === endTime.getTime()) {\r\n        this.setState({ timerMessage: \"Great Work!\" });\r\n        clearInterval(interval);\r\n      }\r\n    }, refreshTimeInMiliseconds);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.state.timerMessage}</h1>\r\n        <button type=\"button\" onClick={this.updateTimer}>\r\n          Start Timer\r\n        </button>\r\n        <div>\r\n          <span>{this.state.timerTime.min}</span>:{this.state.timerTime.sec}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\n/**\r\n * responsible for building the squares in the game and passing current state to the square\r\n */\r\nclass Board extends PureComponent {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Square in the game to display X/O. this is a presentational component\r\n * @param props has value X/O and onclick event\r\n */\r\nfunction Square(props) {\r\n  return (\r\n    <div className=\"square\" onClick={() => props.onClick()}>\r\n      {props.value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./components/Board\";\r\nimport \"./tictactoe.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n/**\r\n * will maintain state and winner logic\r\n */\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\nclass TicTacToe extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n    };\r\n  }\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 ? false : true,\r\n    });\r\n  }\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n        },\r\n      ]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length,\r\n    });\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \"Move #\" + move : \"Game start\";\r\n      return (\r\n        <li key={move}>\r\n          <Link to=\"/tictactoe\" onClick={() => this.jumpTo(move)}>\r\n            {desc}\r\n          </Link>\r\n        </li>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TicTacToe;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Counter from \"./Counter/counter\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport TicTacToe from \"./TicTacToe/tictactoe\";\r\n\r\nexport const history = createBrowserHistory({\r\n  basename: process.env.PUBLIC_URL,\r\n});\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container-app\">\r\n        <p>This message is from a class component</p>\r\n        <h1>Hello World</h1>\r\n        <Welcome name=\"User\"></Welcome>\r\n        <p>Click on the links to navigate further:</p>\r\n        <ol>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/counter\">Counter</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/tictactoe\">TicTacToe</Link>\r\n          </li>\r\n        </ol>\r\n\r\n        <Switch>\r\n          <Route path=\"/counter\" exact component={Counter} />\r\n          <Route path=\"/tictactoe\" exact component={TicTacToe} />\r\n          <Route path=\"/\" exact>\r\n            <h1>Hello from the homepage!</h1>\r\n          </Route>\r\n          <Route path=\"/*\" render={() => <h1>404 Not Found.</h1>} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Welcome(props) {\r\n  return (\r\n    <div>\r\n      <p>This message is from a functional component</p>\r\n      <h1>Welcome, {props.name}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\n// import App from \"./App\";\r\n// import TicTacToe from \"./TicTacToe/tictactoe\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}